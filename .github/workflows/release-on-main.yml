name: Release on main

on:
  push:
    branches: [ main ]

permissions:
  contents: write

concurrency:
  group: release-on-main
  cancel-in-progress: true

jobs:
  build-and-release:
    name: Build and create release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch tags for tag-exists check

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack
        run: corepack enable

      - name: Activate pnpm 9
        run: corepack prepare pnpm@9 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm build

      - name: Read manifest version
        id: manifest
        run: |
          VERSION=$(node --input-type=module -e "import fs from 'node:fs'; console.log(JSON.parse(fs.readFileSync('dist/manifest.json','utf8')).version)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag_check
        shell: bash
        run: |
          if git rev-parse -q --verify "refs/tags/${{ steps.manifest.outputs.tag }}" > /dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.tag_check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.manifest.outputs.tag }}
          target_commitish: ${{ github.sha }}
          name: Release ${{ steps.manifest.outputs.version }}
          body: |
            Automated release for version ${{ steps.manifest.outputs.version }} (sourced from dist/manifest.json).
          files: |
            release/**
          draft: false
          prerelease: false

      - name: Log existing tag info
        if: steps.tag_check.outputs.exists == 'true'
        run: |
          echo "Tag ${{ steps.manifest.outputs.tag }} already exists; skipping release creation."
